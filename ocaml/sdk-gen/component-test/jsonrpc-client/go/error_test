package componenttest

import (
	"errors"
	"strings"
	"testing"
)

func TestRpcError(t *testing.T) {
	//Constuct an rpc client error
	session, err := GetSession("xapi-24/rpc_error_09")
	if err != nil {
		t.Log(err)
		t.Fail()
		return
	}

	var vmRef xenapi.VMRef = "OpaqueRef:6ef08bce-0bf0-30ff-804f-5f0ee4bbdd13"
	_, err = xenapi.VM.GetRecord(session, vmRef)
	if err == nil {
		t.Log(err)
		t.Fail()
		return
	}

	var rpcError = errors.New("call VM.get_record() on http://localhost:5000/jsonrpc status code: 200. Could not decode response body: json: cannot unmarshal string into Go struct field ResponseError.error.code of type int")
	if err.Error() != rpcError.Error() {
		t.Log("The expected error is not the same with the returned one!")
		t.Fail()
		return
	}
}

func TestHttpError(t *testing.T) {
	// Construct an error in RPC response that returned for method/parameter check not as expected
	session, err := GetSession("xapi-24/http_error_10")
	if err != nil {
		t.Log(err)
		t.Fail()
		return
	}

	var vmRef xenapi.VMRef = "OpaqueRef:6ef08bce-0bf0-30ff-804f-5f0ee4bbdd13"
	var httpError = errors.New("API error: code 500, message Rpc server failed to handle the client request!")

	_, err = xenapi.VM.GetRecord(session, vmRef)
	if err == nil {
		t.Log("Expected to be error, but no error is detected")
		t.Fail()
		return
	}

	if !strings.Contains(err.Error(), httpError.Error()) {
		t.Log("The expected error is not the same with the returned one!")
		t.Fail()
		return
	}
}

func TestXapiError(t *testing.T) {
	// Construct an error that returned from Xapi
	session, err := GetSession("xapi-24/xapi_error_13")
	if err != nil {
		t.Log(err)
		t.Fail()
		return
	}

	var vmRef xenapi.VMRef = "OpaqueRef:6ef08bce-0bf0-30ff-804f-5f0ee4bbdd13"
	var xapiError = errors.New("API error: code 1, message HANDLE_INVALID, data OpaqueRef:6ef08bce-0bf0-30ff-804f-5f0ee4bbdd13")

	_, err = xenapi.VM.GetRecord(session, vmRef)
	if err == nil {
		t.Log("Expected to be error, but no error is detected")
		t.Fail()
		return
	}

	if !strings.Contains(err.Error(), xapiError.Error()) {
		t.Log("The expected error is not the same with the returned one!")
		t.Fail()
		return
	}
}
